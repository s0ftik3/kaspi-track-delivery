import { Telegraf, TelegramError } from 'telegraf'
import { KaspiDeliveryDataProvider } from '../providers/delivery-report/kaspi.js'
import { KaspiDeliveryReport } from '../processors/delivery-report/kaspi.js'

export class Bot {
    constructor(token) {
        this.token = token
    }

    /**
     * @param options
     * @returns {Promise<void>}
     */
    async launch(options) {
        const telegraf = new Telegraf(this.token)

        telegraf.catch(this.#handleError)

        telegraf.start(this.#handleStart)
        telegraf.hears(/\d+/, this.#handleReport)

        telegraf.launch(options).catch(err => console.error(err))

        process.once('SIGINT', () => telegraf.stop('SIGINT'))
        process.once('SIGTERM', () => telegraf.stop('SIGTERM'))
        process.on('uncaughtExceptionMonitor', console.error)

        console.log('Bot successfully started!')
    }

    /**
     * @param err
     * @returns {Promise<void>}
     */
    async #handleError(err) {
        if (err.name === 'TimeoutError')
            return console.error('Timeout err', err)
        if (err instanceof TelegramError) return console.error('API err', err)
        console.error('Unexpected err', err)
    }

    /**
     * @param ctx
     * @returns {Promise<void>}
     */
    async #handleStart(ctx) {
        await ctx.reply(
            'üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–≥–æ –Ω–æ–º–µ—Ä –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Kaspi.'
        )
    }

    /**
     * @param ctx
     * @returns {Promise<void>}
     */
    async #handleReport(ctx) {
        const messageExtra = {
            reply_to_message_id: ctx.message.message_id,
            allow_sending_without_reply: true,
        }

        const traceId = ctx.match.at(0)
        if (!traceId)
            return ctx.replyWithHTML(
                `‚ùå <i>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ –í–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.</i>`,
                messageExtra
            )

        const dataProvider = new KaspiDeliveryDataProvider()
        const data = await dataProvider.fetchData(traceId)
        const report = new KaspiDeliveryReport(data)
        const fullData = report.full()

        const hasAnyData =
            fullData &&
            (fullData.progress.length ||
                fullData.routes.length ||
                fullData.items.length)

        if (!hasAnyData)
            return ctx.replyWithHTML(
                `‚ùå <i>–û—Ç—á–µ—Ç –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ${traceId} –Ω–µ –Ω–∞–π–¥–µ–Ω.</i>`,
                messageExtra
            )

        const mapDetails = data => {
            const displayCity = data.city || data.route
            const city = `üìç ${data.city || data.route || '–ù–µ —É–∫–∞–∑–∞–Ω'} (üöö ${data.courier || 'N/A'})`
            const description = `<b>${data.description}</b>`
            const createdAt = data.created_at
            const message = [
                displayCity ? city : undefined,
                description,
                createdAt,
            ]
                .filter(Boolean)
                .join('. ')
            return '‚Üí ' + message
        }

        const items = fullData.items.join(', ')
        const progress = fullData.progress.map(mapDetails).join('\n')
        const routes = fullData.routes.map(mapDetails).join('\n')

        const message =
            `<b>üì¶ –¢–æ–≤–∞—Ä—ã:</b> <code>${items}</code>\n\n` +
            `<b>üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É:</b>\n` +
            `<blockquote expandable>${progress}</blockquote>\n\n` +
            `<b>üöõ –î–µ—Ç–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç–∞:</b>\n` +
            `<blockquote expandable>${routes}</blockquote>\n\n` +
            `<i>–û—Ç—á–µ—Ç –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞ ‚Ññ${traceId}.</i>`

        await ctx.replyWithHTML(message, messageExtra)
    }
}
